1. Select users whose id is either 3,2 or 4

SELECT * FROM users WHERE ID IN (2,3,4); 

2. Count how many basic and premium listings each active user has
- Please return at least: first_name, last_name, basic, premium

select listings.user_id,users.first_name,users.last_name,
  COUNT(CASE WHEN (listings.status = 2) THEN listings.user_id ELSE NULL END) AS basic,
  COUNT(CASE WHEN (listings.status = 3) THEN listings.user_id ELSE NULL END) AS premium
from listings join users
on users.id = listings.user_id
GROUP BY listings.user_id

3. Show the same count as before but only if they have at least ONE premium listing
- Please return at least: first_name, last_name, basic, premium

select listings.user_id,users.first_name,users.last_name,
  COUNT(CASE WHEN (listings.status = 2) THEN listings.user_id ELSE NULL END) AS basic,
  COUNT(CASE WHEN (listings.status = 3) THEN listings.user_id ELSE NULL END) AS premium
from listings join users
on users.id = listings.user_id
GROUP BY listings.user_id 
having premium >=1

4. How much revenue has each active vendor made in 2013
- Please return at least: first_name, last_name, currency, revenue


select clicks.currency,sum(clicks.price) as revenue ,users.first_name,users.last_name
from clicks JOIN listings 
on clicks.listing_id = listings.id
JOIN users on users.id = listings.user_id
where Year(clicks.created) = '2013' and users.status = 2
GROUP BY users.id


5. Insert a new click for listing id 3, at $4.00
- Find out the id of this new click. Please return at least: id

INSERT INTO clicks (listing_id,price,currency,created) VALUES (3,4,'USD',NOW());
SELECT LAST_INSERT_ID as id ();

6. Show listings that have not received a click in 2013
select name
from listings
WHERE id IN(
select listing_id
FROM clicks 
where created > '2013-12-31'
)

7. For each year show number of listings clicked and number of vendors who owned these listings
- Please return at least: date, total_listings_clicked, total_vendors_affected

select COUNT(clicks.listing_id) as total_listings_clicked, year(clicks.created) as created_year,COUNT(listings.user_id) as total_vendors_affected
from clicks JOIN listings
on listings.id = clicks.listing_id
group by created_year


8. Return a comma separated string of listing names for all active vendors
- Please return at least: first_name, last_name, listing_names

select concat(users.first_name, ',',users.last_name, ',',listings.name) as csv
from users JOIN listings
on users.id = listings.user_id
where users.status = 2
